#!/bin/bash

# mdadm Discord Webhook Notification Script
# Author: Generated by GitHub Copilot
# Purpose: Send mdadm events to Discord as formatted notifications
# Usage: mdadm-discord-webhook.sh <event> <device> [component]

set -euo pipefail

# ==============================================================================
# CONFIGURATION - EDIT THIS SECTION
# ==============================================================================

# Discord webhook URL - REPLACE WITH YOUR ACTUAL WEBHOOK URL
# Get this from: Discord Server Settings → Integrations → Webhooks → New Webhook
DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN"

# ==============================================================================
# END CONFIGURATION
# =============================================================================="

# Color constants for Discord embed colors
readonly COLOR_INFO=3447003      # Blue
readonly COLOR_SUCCESS=3066993   # Green
readonly COLOR_WARNING=15105570  # Orange
readonly COLOR_ERROR=15158332    # Red

# Script metadata
readonly SCRIPT_NAME="mdadm-discord-webhook"
readonly VERSION="1.0.0"

# Function to display usage information
usage() {
    cat << EOF
Usage: $0 <event> <device> [component]

Arguments:
    event                  mdadm event type (e.g., Fail, TestMessage, etc.)
    device                 MD device name (e.g., /dev/md0)
    component             Optional component device (e.g., /dev/sda1)

Examples:
    $0 "Fail" "/dev/md0" "/dev/sda1"
    $0 "TestMessage" "/dev/md0"

Configuration:
    Edit the DISCORD_WEBHOOK_URL variable at the top of this script with your
    Discord webhook URL before using.

This script is designed to be used with mdadm's PROGRAM configuration option
in /etc/mdadm.conf or /etc/mdadm/mdadm.conf:

    PROGRAM $0

Version: $VERSION
EOF
}

# Function to log messages
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$SCRIPT_NAME] $*" >&2
}

# Function to get color based on event type
get_event_color() {
    local event="$1"
    case "$event" in
        "Fail"|"FailSpare"|"DegradedArray"|"SparesMissing")
            echo "$COLOR_ERROR"
            ;;
        "RebuildStarted"|"RebuildNN"|"RebuildFinished")
            echo "$COLOR_WARNING"
            ;;
        "TestMessage"|"NewArray"|"SpareActive")
            echo "$COLOR_SUCCESS"
            ;;
        "DeviceDisappeared"|"MoveSpare")
            echo "$COLOR_WARNING"
            ;;
        *)
            echo "$COLOR_INFO"
            ;;
    esac
}

# Function to get event description
get_event_description() {
    local event="$1"
    case "$event" in
        "Fail")
            echo "A device in the array has failed"
            ;;
        "FailSpare")
            echo "A spare device has failed"
            ;;
        "DegradedArray")
            echo "The array has become degraded"
            ;;
        "SparesMissing")
            echo "The array is missing spare devices"
            ;;
        "RebuildStarted")
            echo "Array rebuild has started"
            ;;
        "RebuildNN")
            echo "Array rebuild is in progress"
            ;;
        "RebuildFinished")
            echo "Array rebuild has finished"
            ;;
        "TestMessage")
            echo "Test message from mdadm"
            ;;
        "NewArray")
            echo "A new array has been created"
            ;;
        "SpareActive")
            echo "A spare device has become active"
            ;;
        "DeviceDisappeared")
            echo "A device has disappeared from the system"
            ;;
        "MoveSpare")
            echo "A spare device has been moved between arrays"
            ;;
        *)
            echo "Unknown event type: $event"
            ;;
    esac
}

# Function to get hostname
get_hostname() {
    hostname -f 2>/dev/null || hostname 2>/dev/null || echo "unknown"
}

# Function to get system information
get_system_info() {
    local device="$1"
    local info=""
    
    # Get array status if device exists
    if [[ -e "$device" ]]; then
        local array_info
        if array_info=$(mdadm --detail "$device" 2>/dev/null); then
            local state level devices
            state=$(echo "$array_info" | grep -i "State :" | cut -d: -f2- | xargs)
            level=$(echo "$array_info" | grep -i "Raid Level :" | cut -d: -f2- | xargs)
            devices=$(echo "$array_info" | grep -i "Total Devices :" | cut -d: -f2- | xargs)
            
            info="**Array State:** $state\\n"
            info+="**RAID Level:** $level\\n"
            info+="**Total Devices:** $devices\\n"
        fi
    fi
    
    # Add system load and uptime
    if command -v uptime >/dev/null 2>&1; then
        local uptime_info
        uptime_info=$(uptime | sed 's/.*up //' | sed 's/, *[0-9]* users.*//')
        info+="**System Uptime:** $uptime_info\\n"
    fi
    
    echo "$info"
}

# Function to send Discord webhook
send_discord_webhook() {
    local event="$1"
    local device="$2"
    local component="$3"
    
    local hostname
    local timestamp
    local color
    local description
    local system_info
    
    hostname=$(get_hostname)
    timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
    color=$(get_event_color "$event")
    description=$(get_event_description "$event")
    system_info=$(get_system_info "$device")
    
    # Build the JSON payload
    local json_payload
    json_payload=$(cat << EOF
{
    "embeds": [
        {
            "title": "mdadm Event: $event",
            "description": "$description",
            "color": $color,
            "timestamp": "$timestamp",
            "fields": [
                {
                    "name": "Device",
                    "value": "\`$device\`",
                    "inline": true
                },
                {
                    "name": "Host",
                    "value": "$hostname",
                    "inline": true
                }$(if [[ -n "$component" ]]; then
                    echo ","
                    cat << COMPONENT_EOF
                {
                    "name": "Component",
                    "value": "\`$component\`",
                    "inline": true
                }
COMPONENT_EOF
                fi)$(if [[ -n "$system_info" ]]; then
                    echo ","
                    cat << INFO_EOF
                {
                    "name": "System Information",
                    "value": "$system_info",
                    "inline": false
                }
INFO_EOF
                fi)
            ],
            "footer": {
                "text": "mdadm-discord-webhook v$VERSION"
            }
        }
    ]
}
EOF
)

    log "Sending Discord notification for event: $event, device: $device"
    
    # Send the webhook using curl
    if curl -H "Content-Type: application/json" \
            -d "$json_payload" \
            -X POST \
            --max-time 30 \
            --retry 3 \
            --retry-delay 2 \
            --silent \
            --show-error \
            "$DISCORD_WEBHOOK_URL"; then
        log "Successfully sent Discord notification"
        return 0
    else
        log "Failed to send Discord notification"
        return 1
    fi
}

# Main function
main() {
    # Check if help is requested
    if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        usage
        exit 0
    fi
    
    # Validate number of arguments
    if [[ $# -lt 2 ]] || [[ $# -gt 3 ]]; then
        echo "Error: Invalid number of arguments" >&2
        usage >&2
        exit 1
    fi
    
    local event="$1"
    local device="$2"
    local component="${3:-}"
    
    # Validate webhook URL configuration
    if [[ "$DISCORD_WEBHOOK_URL" == "https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN" ]]; then
        log "Error: Please configure DISCORD_WEBHOOK_URL in the script before use"
        log "Edit the DISCORD_WEBHOOK_URL variable at the top of this script"
        exit 1
    fi
    
    if [[ ! "$DISCORD_WEBHOOK_URL" =~ ^https://discord\.com/api/webhooks/ ]] && [[ ! "$DISCORD_WEBHOOK_URL" =~ ^https://discordapp\.com/api/webhooks/ ]]; then
        log "Warning: Webhook URL doesn't appear to be a valid Discord webhook URL"
    fi
    
    # Check if required tools are available
    if ! command -v curl >/dev/null 2>&1; then
        log "Error: curl is required but not installed"
        exit 1
    fi
    
    if ! command -v mdadm >/dev/null 2>&1; then
        log "Warning: mdadm command not found, system information will be limited"
    fi
    
    # Send the notification
    if send_discord_webhook "$event" "$device" "$component"; then
        log "Notification sent successfully"
        exit 0
    else
        log "Failed to send notification"
        exit 1
    fi
}

# Run main function with all arguments
main "$@"